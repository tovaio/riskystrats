{"version":3,"sources":["Player.ts","Lobby.tsx","Util.ts","ClientState.ts","RoomState.ts","Map/MapNode.tsx","Map/MapEdge.tsx","Map/Map.tsx","Map/MapArmy.tsx","Game.tsx","Room.tsx","Client.tsx","App.tsx","index.tsx"],"names":["Team","Lobby","props","createRoom","useCallback","undefined","socket","emit","joinRoom","roomSummary","id","roomList","roomSummaries","map","onMouseDown","name","nPlayers","maxPlayers","nSpectators","ClientStateActionType","nodeColors","Neutral","Red","Blue","Green","Yellow","Orange","Purple","RoomStateActionType","initClientState","room","player","clientStateReducer","state","action","type","SetSocket","SetRoom","SetPlayer","SetRoomList","Error","NodeType","initRoomState","nodeHoveredID","nodeSelectedID","roomStateReducer","SetNodeHoveredID","SetNodeSelectedID","MapNode","visible","team","node","adj","isVisible","selectable","nodeSelected","selected","hovered","nodeHovered","assigned","assign","primaryColor","secondaryColor","invertColors","borderRadius","Artillery","Fort","borderStyle","Normal","Factory","className","onMouseEnter","onMouseEnterNode","onMouseLeave","onMouseLeaveNode","style","width","nodeRadius","height","left","x","top","y","borderWidth","backgroundColor","color","borderColor","cursor","textShadow","boxShadow","troops","MapEdge","node1","node2","xDiff","yDiff","angle","Math","atan2","length","sqrt","cos","PI","sin","transform","Map","nodes","key","edges","concat","MapArmy","fromNode","army","from","toNode","to","distance","btwnDistance","armyRadius","Game","armies","game","Room","useReducer","dispatch","onKeyDown","e","which","keyCode","unselect","String","fromCharCode","PowerPlant","useEffect","document","addEventListener","removeEventListener","players","summary","Client","console","log","io","connect","on","roomListJSON","JSON","parse","playerDataJSON","playerData","roomDataJSON","flatRoomData","roomData","flatRoom","spectators","flatMap","flatNode","adjID","push","flatArmy","nodeID1","nodeID2","unflatten","disconnect","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e75b6da4.chunk.js","sourcesContent":["export enum Team {\r\n    Neutral,\r\n    Red,\r\n    Blue,\r\n    Green,\r\n    Yellow,\r\n    Orange,\r\n    Purple\r\n}\r\n\r\nexport interface PlayerData {\r\n    team: Team,\r\n    name: string,\r\n    id: number\r\n}","import React, { useCallback } from 'react';\r\n\r\nimport { RoomSummaryData } from './Room';\r\n\r\ninterface LobbyProps {\r\n    socket: SocketIOClient.Socket | undefined,\r\n    roomList: RoomSummaryData[] | undefined;\r\n}\r\n\r\n/*\r\n    Lobby:\r\n    React component which displays the list of Rooms that are currently active\r\n*/\r\nconst Lobby: React.FC<LobbyProps> = props => {\r\n    const createRoom = useCallback(\r\n        () => {\r\n            if (props.socket !== undefined) {\r\n                props.socket.emit('createRoom', 2, false);\r\n            }\r\n        },\r\n        [props.socket]\r\n    )\r\n\r\n    const joinRoom = useCallback(\r\n        (roomSummary: RoomSummaryData) => {\r\n            if (props.socket !== undefined) {\r\n                props.socket.emit('joinRoom', roomSummary.id);\r\n            }\r\n        },\r\n        [props.socket]\r\n    );\r\n\r\n    if (props.roomList !== undefined) {\r\n        const roomSummaries = props.roomList.map(roomSummary => (\r\n            <p onMouseDown={() => {joinRoom(roomSummary);}}>\r\n                {roomSummary.name}: {roomSummary.nPlayers} players / {roomSummary.maxPlayers} max players / {roomSummary.nSpectators} spectators\r\n            </p>\r\n        ));\r\n\r\n        return (\r\n            <>\r\n                <p onMouseDown={() => {createRoom();}}>\r\n                    Create Room!\r\n                </p>\r\n                {roomSummaries}\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <p>Waiting to retrieve the room list from the server...</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lobby;","/*\r\n    Collection of utility functions and constants\r\n*/\r\n\r\nimport { Team } from './Player';\r\nimport { RoomData, RoomDataFlat } from './Room';\r\nimport { MapNodeData } from './Map/MapNode';\r\nimport { MapArmyData } from './Map/MapArmy';\r\n\r\nexport const unflatten = (flatRoom: RoomDataFlat): RoomData => {\r\n    if (flatRoom.game === undefined) {\r\n        return {\r\n            game: undefined,\r\n            players: flatRoom.players,\r\n            spectators: flatRoom.spectators,\r\n            summary: flatRoom.summary\r\n        }\r\n    }\r\n\r\n    const flatMap = flatRoom.game.map;\r\n\r\n    const nodes: MapNodeData[] = flatMap.nodes.map(flatNode => ({\r\n        x: flatNode.x,\r\n        y: flatNode.y,\r\n        id: flatNode.id,\r\n        adj: [],\r\n        team: flatNode.team,\r\n        troops: flatNode.troops,\r\n        type: flatNode.type,\r\n        assign: undefined\r\n    }));\r\n\r\n    for (let flatNode of flatMap.nodes) {\r\n        const node = nodes[flatNode.id];\r\n        for (let adjID of flatNode.adj) {\r\n            node.adj.push(nodes[adjID]);\r\n        }\r\n        node.assign = flatNode.assign >= 0 ? nodes[flatNode.assign] : undefined;\r\n    }\r\n\r\n    const armies: MapArmyData[] = flatRoom.game.armies.map(flatArmy => ({\r\n        from: nodes[flatArmy.from],\r\n        to: nodes[flatArmy.to],\r\n        troops: flatArmy.troops,\r\n        distance: flatArmy.distance,\r\n        team: flatArmy.team,\r\n        id: flatArmy.id\r\n    }));\r\n\r\n    return {\r\n        game: {\r\n            map: {\r\n                nodes: nodes,\r\n                edges: flatMap.edges.map(([nodeID1, nodeID2]) => [nodes[nodeID1], nodes[nodeID2]])\r\n            },\r\n            armies: armies\r\n        },\r\n        players: flatRoom.players,\r\n        spectators: flatRoom.spectators,\r\n        summary: flatRoom.summary\r\n    }\r\n}\r\n\r\nexport const nodeColors = {\r\n    [Team.Neutral]: '#444444',\r\n    [Team.Red]: '#DD0000',\r\n    [Team.Blue]: '#0000DD',\r\n    [Team.Green]: '#00DD00',\r\n    [Team.Yellow]: '#DDDD00',\r\n    [Team.Orange]: '#DD7700',\r\n    [Team.Purple]: '#7700DD'\r\n};\r\nexport const nodeRadius = 2;\r\nexport const armyRadius = 1;\r\nexport const edgeWidth = 5/9;\r\nexport const scaleFactor = 1;","import { useReducer } from 'react';\r\n\r\nimport { PlayerData } from './Player';\r\nimport { RoomData, RoomSummaryData } from './Room';\r\n\r\ninterface ClientState {\r\n    socket: SocketIOClient.Socket | undefined,\r\n    room: RoomData | undefined,\r\n    player: PlayerData | undefined,\r\n    roomList: RoomSummaryData[] | undefined\r\n}\r\n\r\nexport enum ClientStateActionType {\r\n    SetSocket,\r\n    SetRoom,\r\n    SetPlayer,\r\n    SetRoomList\r\n}\r\n\r\ninterface SetSocketAction {\r\n    type: ClientStateActionType.SetSocket,\r\n    socket: SocketIOClient.Socket | undefined\r\n}\r\n\r\ninterface SetRoomAction {\r\n    type: ClientStateActionType.SetRoom,\r\n    room: RoomData | undefined\r\n}\r\n\r\ninterface SetPlayerAction {\r\n    type: ClientStateActionType.SetPlayer,\r\n    player: PlayerData | undefined\r\n}\r\n\r\ninterface SetRoomListAction {\r\n    type: ClientStateActionType.SetRoomList,\r\n    roomList: RoomSummaryData[] | undefined\r\n}\r\n\r\ntype ClientStateAction = SetSocketAction | SetRoomAction | SetPlayerAction | SetRoomListAction;\r\n\r\nconst initClientState: ClientState = {\r\n    socket: undefined,\r\n    room: undefined,\r\n    player: undefined,\r\n    roomList: undefined\r\n};\r\n\r\nconst clientStateReducer = (state: ClientState, action: ClientStateAction): ClientState => {\r\n    switch (action.type) {\r\n        case ClientStateActionType.SetSocket:\r\n            return {\r\n                socket: action.socket,\r\n                room: state.room,\r\n                player: state.player,\r\n                roomList: state.roomList\r\n            }\r\n        case ClientStateActionType.SetRoom:\r\n            return {\r\n                socket: state.socket,\r\n                room: action.room,\r\n                player: state.player,\r\n                roomList: state.roomList\r\n            }\r\n        case ClientStateActionType.SetPlayer:\r\n            return {\r\n                socket: state.socket,\r\n                room: state.room,\r\n                player: action.player,\r\n                roomList: state.roomList\r\n            };\r\n        case ClientStateActionType.SetRoomList:\r\n            return {\r\n                socket: state.socket,\r\n                room: state.room,\r\n                player: state.player,\r\n                roomList: action.roomList\r\n            };\r\n        default:\r\n            throw new Error(\"Action type not found for clientStateReducer!\");\r\n    }\r\n}\r\n\r\nexport type ClientStateDispatch = React.Dispatch<ClientStateAction>;\r\n\r\nexport const useClientState = (): [ClientState, ClientStateDispatch] => {\r\n    return useReducer(clientStateReducer, initClientState);\r\n}\r\n\r\n","import { useReducer } from 'react';\r\n\r\ninterface RoomState {\r\n    nodeHoveredID: number | undefined,\r\n    nodeSelectedID: number | undefined\r\n}\r\n\r\nexport enum RoomStateActionType {\r\n    SetNodeHoveredID,\r\n    SetNodeSelectedID\r\n}\r\n\r\ninterface SetNodeHoveredIDAction {\r\n    type: RoomStateActionType.SetNodeHoveredID,\r\n    nodeHoveredID: number | undefined\r\n}\r\n\r\ninterface SetNodeSelectedIDAction {\r\n    type: RoomStateActionType.SetNodeSelectedID,\r\n    nodeSelectedID: number | undefined\r\n}\r\n\r\ntype RoomStateAction = SetNodeHoveredIDAction | SetNodeSelectedIDAction;\r\n\r\nconst initRoomState: RoomState = {\r\n    nodeHoveredID: undefined,\r\n    nodeSelectedID: undefined\r\n};\r\n\r\nconst roomStateReducer = (state: RoomState, action: RoomStateAction): RoomState => {\r\n    switch (action.type) {\r\n        case RoomStateActionType.SetNodeHoveredID:\r\n            return {\r\n                nodeHoveredID: action.nodeHoveredID,\r\n                nodeSelectedID: state.nodeSelectedID\r\n            }\r\n        case RoomStateActionType.SetNodeSelectedID:\r\n            return {\r\n                nodeHoveredID: state.nodeHoveredID,\r\n                nodeSelectedID: action.nodeSelectedID\r\n            }\r\n        default:\r\n            throw new Error(\"Action type not found for roomStateReducer!\")\r\n    }\r\n}\r\n\r\nexport type RoomStateDispatch = React.Dispatch<RoomStateAction>\r\n\r\nexport const useRoomState = (): [RoomState, RoomStateDispatch] => {\r\n    return useReducer(roomStateReducer, initRoomState);\r\n}\r\n","import React from 'react';\r\nimport { nodeColors, nodeRadius, edgeWidth, scaleFactor } from '../Util';\r\n\r\nimport { Team } from '../Player';\r\n\r\n// Determines if a node is visible to a certain player.\r\nconst isVisible = (node: MapNodeData, team: Team): boolean => {\r\n    if (node.team === team) {\r\n        return true;\r\n    } else {\r\n        for (let adjNode of node.adj) {\r\n            if (adjNode.team === team)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// Properties for MapNode component\r\ninterface MapNodeProps {\r\n    node: MapNodeData,                                  // Node represented by this component\r\n    team: Team,                                         // Team of the player rendering this node\r\n    nodeHovered?: MapNodeData,                          // Node that the player is hovering over\r\n    nodeSelected?: MapNodeData,                         // Node that the player has currently selected\r\n    onMouseEnterNode?: (node: MapNodeData) => void,     // Callback for when the player's mouse enters the node\r\n    onMouseLeaveNode?: (node: MapNodeData) => void      // Callback for when the player's mouse leaves the node\r\n}\r\n\r\n// Types of buildings on nodes\r\nexport enum NodeType {\r\n    Normal,             // No building (default for all nodes)\r\n    Factory,            // Factory (generates more troops per second)\r\n    PowerPlant,         // PowerPlant (increases production output of adjacent factories)\r\n    Fort,               // Fort (adds defensive bonus against incoming enemy armies)\r\n    Artillery           // Artillery (adds offensive bonus to outgoing friendly armies)\r\n}\r\n\r\n/*\r\n    MapNode:\r\n    Component which visualizes a node on the game map\r\n*/\r\nconst MapNode: React.FC<MapNodeProps> = (props) => {\r\n    // Helper booleans\r\n    const visible = props.team === Team.Neutral || isVisible(props.node, props.team);\r\n    const selectable = props.team !== Team.Neutral && ((props.nodeSelected !== undefined && visible) || props.node.team === props.team);\r\n    const selected = props.node === props.nodeSelected;\r\n    const hovered = props.node === props.nodeHovered;\r\n    const assigned = props.nodeSelected !== undefined && props.nodeSelected.assign === props.node; \r\n\r\n    // Colors\r\n    const primaryColor = visible ? nodeColors[props.node.team] : nodeColors[Team.Neutral];\r\n    const secondaryColor = visible ? '#eeeeee' : nodeColors[Team.Neutral];\r\n    const invertColors = (selectable && hovered) || selected;\r\n\r\n    // Border\r\n    const borderRadius = (visible && (props.node.type === NodeType.Artillery || props.node.type === NodeType.Fort)) ? 5 : 50;\r\n    const borderStyle = (visible && props.node.type !== NodeType.Normal) ? ((props.node.type === NodeType.Artillery || props.node.type === NodeType.Factory) ? 'double' : 'inset') : 'solid';\r\n\r\n    return (\r\n        <div\r\n            className = 'mapNode'\r\n\r\n            // Callbacks\r\n            onMouseEnter = {() => {if (props.onMouseEnterNode !== undefined) props.onMouseEnterNode(props.node);}}\r\n            onMouseLeave = {() => {if (props.onMouseLeaveNode !== undefined) props.onMouseLeaveNode(props.node);}}\r\n\r\n            // CSS\r\n            style = {{\r\n                // Dimensions\r\n                width: `${nodeRadius * 2 / scaleFactor}vmin`,\r\n                height: `${nodeRadius * 2 / scaleFactor}vmin`,\r\n\r\n                // Position\r\n                left: `calc(50% + ${(props.node.x - nodeRadius) / scaleFactor}vmin)`,\r\n                top: `calc(50% + ${(props.node.y - nodeRadius) / scaleFactor}vmin)`,\r\n\r\n                // Border\r\n                borderStyle: borderStyle,\r\n                borderWidth: `${edgeWidth / scaleFactor}vmin`,\r\n                borderRadius: borderRadius,\r\n\r\n                // Color\r\n                backgroundColor: invertColors ? secondaryColor : primaryColor,\r\n                color: invertColors ? primaryColor : secondaryColor,\r\n                borderColor: invertColors ? primaryColor : secondaryColor,\r\n\r\n                // Cursor\r\n                cursor: (selectable && hovered) ? 'pointer' : 'default',\r\n\r\n                // Text stroke\r\n                textShadow: `\r\n                    -2px -2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                    -2px  2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                     2px -2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                     2px  2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                    -2px    0 0 ${invertColors ? secondaryColor: primaryColor},\r\n                     2px    0 0 ${invertColors ? secondaryColor: primaryColor},\r\n                       0 -2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                       0  2px 0 ${invertColors ? secondaryColor: primaryColor}\r\n                `,\r\n\r\n                // Assignment glow\r\n                boxShadow: assigned ? `0 0 30px #ffff00` : ''\r\n            }}\r\n        >\r\n            {\r\n                // Troop count (only if visible)\r\n                <p>{(visible) ? props.node.troops : null}</p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapNode;\r\n\r\nexport interface MapNodeData {\r\n    x: number,\r\n    y: number,\r\n    id: number,\r\n    adj: MapNodeData[],\r\n    team: Team,\r\n    troops: number,\r\n    type: NodeType,\r\n    assign: MapNodeData | undefined\r\n}\r\n\r\nexport interface MapNodeDataFlat {\r\n    x: number,\r\n    y: number,\r\n    id: number,\r\n    adj: number[],\r\n    team: Team,\r\n    troops: number,\r\n    type: NodeType,\r\n    assign: number\r\n}","import React from 'react';\r\nimport { nodeColors, edgeWidth, scaleFactor } from '../Util';\r\n\r\nimport { Team } from '../Player';\r\nimport { MapNodeData } from './MapNode';\r\n\r\n// Properties for MapEdge component\r\ninterface MapEdgeProps {\r\n    node1: MapNodeData,                         // The first endpoint node of the edge\r\n    node2: MapNodeData,                         // The second endpoint node of the edge\r\n    team: Team,                                 // Team of the player that is rendering this edge\r\n    nodeSelected?: MapNodeData                  // Node that the player currently has selected\r\n}\r\n\r\n/*\r\n    MapEdge:\r\n    Component which represents an edge between two nodes on the game map\r\n*/\r\nconst MapEdge: React.FC<MapEdgeProps> = (props) => {\r\n    // Helper booleans\r\n    const visible = props.team === Team.Neutral || props.node1.team === props.team || props.node2.team === props.team;\r\n\r\n    // Positional math\r\n    const xDiff = props.node2.x - props.node1.x;\r\n    const yDiff = props.node2.y - props.node1.y;\r\n\r\n    const angle = Math.atan2(yDiff, xDiff);\r\n    const length = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n\r\n    const x = props.node1.x + Math.cos(angle - Math.PI / 2) * edgeWidth / 2;\r\n    const y = props.node1.y + Math.sin(angle - Math.PI / 2) * edgeWidth / 2;\r\n\r\n    return (\r\n        <div\r\n            className='mapEdge'\r\n\r\n            // CSS\r\n            style={{\r\n                // Dimensions\r\n                width: `${length / scaleFactor}vmin`,\r\n                height: `${edgeWidth / scaleFactor}vmin`,\r\n\r\n                // Position\r\n                left: `calc(50% + ${x / scaleFactor}vmin)`,\r\n                top: `calc(50% + ${y / scaleFactor}vmin)`,\r\n                transform: `rotate(${angle * 180 / Math.PI}deg)`,\r\n\r\n                // Color\r\n                backgroundColor: visible ? '#eeeeee' : nodeColors[Team.Neutral]\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default MapEdge;","import React from 'react';\r\n\r\nimport { Team } from '../Player';\r\n\r\nimport MapNode, { MapNodeData, MapNodeDataFlat } from './MapNode';\r\nimport MapEdge from './MapEdge';\r\n\r\nimport './Map.css';\r\n\r\ninterface MapProps {\r\n    map: MapData,\r\n    team: Team,\r\n    nodeHoveredID?: number,\r\n    nodeSelectedID?: number,\r\n    onMouseEnterNode?: (node: MapNodeData) => void,\r\n    onMouseLeaveNode?: (node: MapNodeData) => void\r\n}\r\n\r\nconst Map: React.FC<MapProps> = props => {\r\n    const nodeHovered = (props.nodeHoveredID !== undefined) ? props.map.nodes[props.nodeHoveredID] : undefined;\r\n    const nodeSelected = (props.nodeSelectedID !== undefined) ? props.map.nodes[props.nodeSelectedID] : undefined;\r\n    \r\n    const nodes = props.map.nodes.map(node => (\r\n        <MapNode\r\n            node = {node}\r\n            team = {props.team}\r\n            nodeHovered = {nodeHovered}\r\n            nodeSelected = {nodeSelected}\r\n            onMouseEnterNode = {props.onMouseEnterNode}\r\n            onMouseLeaveNode = {props.onMouseLeaveNode}\r\n            key = {`node_${node.id}`}\r\n        />\r\n    ));\r\n\r\n    const edges = props.map.edges.map(([node1, node2]) => (\r\n        <MapEdge\r\n            node1 = {node1}\r\n            node2 = {node2}\r\n            team = {props.team}\r\n            nodeSelected = {nodeSelected}\r\n            key = {`edge_${node1.id}_${node2.id}`}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            {nodes.concat(edges)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n\r\nexport interface MapData {\r\n    nodes: MapNodeData[],\r\n    edges: [MapNodeData, MapNodeData][]\r\n}\r\n\r\nexport interface MapDataFlat {\r\n    nodes: MapNodeDataFlat[],\r\n    edges: [number, number][]\r\n}","import React from 'react';\r\nimport { nodeRadius, armyRadius, scaleFactor, nodeColors } from '../Util';\r\n\r\nimport { MapNodeData } from './MapNode';\r\nimport { Team } from '../Player';\r\n\r\n// Properties for MapArmy component\r\ninterface MapArmyProps {\r\n    army: MapArmyData,\r\n    team: Team\r\n}\r\n\r\n/*\r\n    MapArmy:\r\n    Component which represents a travelling army on the game map\r\n*/\r\nconst MapArmy: React.FC<MapArmyProps> = (props) => {\r\n    const fromNode = props.army.from;\r\n    const toNode = props.army.to;\r\n\r\n    // Don't show if not visible to player!\r\n    if (props.team !== Team.Neutral && fromNode.team !== props.team && toNode.team !== props.team)\r\n        return <></>;\r\n    \r\n    // Math\r\n    const xDiff = toNode.x - fromNode.x;\r\n    const yDiff = toNode.y - fromNode.y;\r\n\r\n    const distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n    const btwnDistance = nodeRadius + armyRadius + props.army.distance * (distance - 2 * nodeRadius - 2 * armyRadius) / distance;\r\n\r\n    const angle = Math.atan2(yDiff, xDiff);\r\n\r\n    const x = fromNode.x + Math.cos(angle) * btwnDistance;\r\n    const y = fromNode.y + Math.sin(angle) * btwnDistance;\r\n\r\n    // Color\r\n    const color = nodeColors[props.army.team];\r\n\r\n    return (\r\n        <div\r\n            className='mapArmy'\r\n\r\n            // CSS\r\n            style={{\r\n                // Dimensions\r\n                width: `${armyRadius * 2 / scaleFactor}vmin`,\r\n                height: `${armyRadius * 2 / scaleFactor}vmin`,\r\n\r\n                // Position\r\n                left: `calc(50% + ${(x - armyRadius) / scaleFactor}vmin)`,\r\n                top: `calc(50% + ${(y - armyRadius) / scaleFactor}vmin)`,\r\n\r\n                // Color\r\n                backgroundColor: color,\r\n\r\n                // Text stroke\r\n                textShadow: `\r\n                    -1px -1px 0 ${color},\r\n                    -1px  1px 0 ${color},\r\n                     1px -1px 0 ${color},\r\n                     1px  1px 0 ${color},\r\n                    -1px    0 0 ${color},\r\n                     1px    0 0 ${color},\r\n                       0 -1px 0 ${color},\r\n                       0  1px 0 ${color}\r\n                `\r\n            }}\r\n        >\r\n            <p>{props.army.troops}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapArmy;\r\n\r\nexport interface MapArmyData {\r\n    from: MapNodeData,\r\n    to: MapNodeData,\r\n    troops: number,\r\n    distance: number,\r\n    team: Team,\r\n    id: number\r\n}\r\n\r\nexport interface MapArmyDataFlat {\r\n    from: number,\r\n    to: number,\r\n    troops: number,\r\n    distance: number,\r\n    team: Team,\r\n    id: number\r\n}","import React from 'react';\r\n\r\nimport { Team } from './Player';\r\n\r\nimport Map, { MapData, MapDataFlat } from './Map/Map';\r\nimport MapArmy, { MapArmyData, MapArmyDataFlat } from './Map/MapArmy';\r\nimport { MapNodeData } from './Map/MapNode';\r\n\r\ninterface GameProps {\r\n    game: GameData,\r\n    team: Team,\r\n    nodeHoveredID?: number,\r\n    nodeSelectedID?: number,\r\n    onMouseEnterNode?: (node: MapNodeData) => void,\r\n    onMouseLeaveNode?: (node: MapNodeData) => void\r\n}\r\n\r\n/*\r\n    Game:\r\n    React component that renders a game of riskystrats.\r\n    It is client-agnostic, meaning that you can use this component to render views of riskystrats games without interaction.\r\n    (one particular example of this is for visualizing replays of games, viewing AI play each other, etc.)\r\n*/\r\nconst Game: React.FC<GameProps> = props => {\r\n    const armies = props.game.armies.map(army => (\r\n        <MapArmy\r\n            army = {army}\r\n            team = {props.team}\r\n            key = {`army_${army.id}`}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <Map\r\n                map = {props.game.map}\r\n                team = {props.team}\r\n                nodeHoveredID = {props.nodeHoveredID}\r\n                nodeSelectedID = {props.nodeSelectedID}\r\n                onMouseEnterNode = {props.onMouseEnterNode}\r\n                onMouseLeaveNode = {props.onMouseLeaveNode}\r\n            />\r\n            {armies}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n\r\nexport interface GameData {\r\n    map: MapData,\r\n    armies: MapArmyData[]\r\n}\r\n\r\nexport interface GameDataFlat {\r\n    map: MapDataFlat,\r\n    armies: MapArmyDataFlat[]\r\n}","import React, { useCallback, useEffect } from 'react';\r\n\r\nimport { useRoomState, RoomStateActionType } from './RoomState';\r\n\r\nimport { PlayerData } from './Player';\r\nimport Game, { GameData, GameDataFlat } from './Game';\r\nimport { MapNodeData, NodeType } from './Map/MapNode';\r\n\r\ninterface RoomProps {\r\n    socket: SocketIOClient.Socket,\r\n    room: RoomData,\r\n    player: PlayerData\r\n}\r\n\r\n/*\r\n    Room:\r\n    React component which manages the rendering and functionality of a game room\r\n*/\r\nconst Room: React.FC<RoomProps> = props => {\r\n    const [state, dispatch] = useRoomState();\r\n\r\n    // Set nodeHoveredID in roomState when the player's mouse enters/leaves a node\r\n    const onMouseEnterNode = useCallback(\r\n        (node: MapNodeData) => {\r\n            dispatch({type: RoomStateActionType.SetNodeHoveredID, nodeHoveredID: node.id});\r\n        },\r\n        [dispatch]\r\n    );\r\n    const onMouseLeaveNode = useCallback(\r\n        () => {\r\n            dispatch({type: RoomStateActionType.SetNodeHoveredID, nodeHoveredID: undefined});\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    // Callback to perform socket actions / adjust roomState when the player presses a button\r\n    const onKeyDown = useCallback(\r\n        (e: KeyboardEvent) => {\r\n            if (props.socket === undefined || props.room === undefined || props.room.game === undefined || props.player === undefined || state.nodeSelectedID === undefined)\r\n                return;\r\n\r\n            const nodeSelected = props.room.game.map.nodes[state.nodeSelectedID];\r\n            if (nodeSelected === undefined || nodeSelected.team !== props.player.team)\r\n                return;\r\n\r\n            const key = e.which || e.keyCode;\r\n\r\n            let unselect = true;\r\n\r\n            switch (String.fromCharCode(key)) {\r\n                case 'A':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.Factory);\r\n                    break;\r\n                case 'S':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.PowerPlant);\r\n                    break;\r\n                case 'Z':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.Fort);\r\n                    break;\r\n                case 'X':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.Artillery);\r\n                    break;\r\n                case 'Q':\r\n                    if (state.nodeHoveredID === undefined || state.nodeHoveredID === state.nodeSelectedID)\r\n                        break;\r\n                    props.socket.emit('sendArmy', state.nodeSelectedID, state.nodeHoveredID, 10);\r\n                    unselect = false;\r\n                    break;\r\n                case 'W':\r\n                    if (state.nodeHoveredID === undefined || state.nodeHoveredID === state.nodeSelectedID)\r\n                        break;\r\n                    props.socket.emit('sendArmy', state.nodeSelectedID, state.nodeHoveredID, 100);\r\n                    unselect = false;\r\n                    break;\r\n                case 'E':\r\n                    if (state.nodeHoveredID === state.nodeSelectedID)\r\n                        break;\r\n                    props.socket.emit('assign', state.nodeSelectedID, (state.nodeHoveredID !== undefined) ? state.nodeHoveredID : -1);\r\n                    unselect = false;\r\n                    break;\r\n            }\r\n            if (unselect)\r\n                dispatch({type: RoomStateActionType.SetNodeSelectedID, nodeSelectedID: undefined});\r\n        },\r\n        [props, state, dispatch]\r\n    );\r\n\r\n    // Callback to adjust nodeSelected when mouse is clicked\r\n    const onMouseDown = useCallback(\r\n        () => {\r\n            if (state.nodeHoveredID !== undefined && props.room !== undefined && props.room.game !== undefined) {\r\n                const nodeHovered = props.room.game.map.nodes[state.nodeHoveredID];\r\n                if (nodeHovered !== undefined && nodeHovered.team === props.player.team) {\r\n                    dispatch({type: RoomStateActionType.SetNodeSelectedID, nodeSelectedID: nodeHovered.id});\r\n                    return;\r\n                }\r\n            }\r\n            dispatch({type: RoomStateActionType.SetNodeSelectedID, nodeSelectedID: undefined});\r\n        },\r\n        [props, state, dispatch]\r\n    );\r\n\r\n    // Bind event listener for keyDown\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('keydown', onKeyDown);\r\n            return () => {\r\n                document.removeEventListener('keydown', onKeyDown);\r\n            }\r\n        },\r\n        [onKeyDown]\r\n    );\r\n\r\n    // Bind event listener for mouseDown\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('mousedown', onMouseDown);\r\n            return () => {\r\n                document.removeEventListener('mousedown', onMouseDown);\r\n            }\r\n        },\r\n        [onMouseDown]\r\n    );\r\n\r\n    if (props.room.game !== undefined) {\r\n        return (\r\n            <Game\r\n                game = {props.room.game}\r\n                team = {props.player.team}\r\n                nodeHoveredID = {state.nodeHoveredID}\r\n                nodeSelectedID = {state.nodeSelectedID}\r\n                onMouseEnterNode = {onMouseEnterNode}\r\n                onMouseLeaveNode = {onMouseLeaveNode}\r\n            />\r\n        );\r\n    } else {\r\n        if (props.room.players.length === props.room.summary.maxPlayers && props.player.id === props.room.players[0].id) {\r\n            props.socket.emit('startRoom');\r\n        }\r\n        return (\r\n            <p>\r\n                Waiting for at least {props.room.summary.maxPlayers} players... (currently at {props.room.summary.nPlayers}!) <br/>\r\n                Perhaps invite friends or open up a new tab of this game?\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Room;\r\n\r\nexport interface RoomData {\r\n    game: GameData | undefined,\r\n    players: PlayerData[],\r\n    spectators: PlayerData[],\r\n    summary: RoomSummaryData\r\n}\r\n\r\nexport interface RoomDataFlat {\r\n    game: GameDataFlat | undefined,\r\n    players: PlayerData[],\r\n    spectators: PlayerData[],\r\n    summary: RoomSummaryData\r\n}\r\n\r\nexport interface RoomSummaryData {\r\n    name: string,\r\n    id: string,\r\n    nPlayers: number,\r\n    maxPlayers: number,\r\n    nSpectators: number\r\n}","import React, { useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nimport Lobby from './Lobby';\r\n\r\nimport { unflatten } from './Util';\r\nimport { useClientState, ClientStateActionType } from './ClientState';\r\n\r\nimport { PlayerData } from './Player';\r\nimport Room, { RoomDataFlat, RoomSummaryData } from './Room';\r\n\r\n/*\r\n    Client:\r\n    React component which manages state, renders the main lobby/game rooms, etc.\r\n*/\r\nconst Client: React.FC = () => {\r\n    const [state, dispatch] = useClientState();\r\n\r\n    // Connect to WebSocket server\r\n    useEffect(\r\n        () => {\r\n            console.log(\"connecting!\");\r\n            const url = (process.env.NODE_ENV === 'production') ? 'https://riskystrats.herokuapp.com' : 'http://localhost:3001';\r\n            const socket = io.connect(url);\r\n            dispatch({type: ClientStateActionType.SetSocket, socket: socket});\r\n\r\n            socket.on('roomList', (roomListJSON: string) => {\r\n                const roomList: RoomSummaryData[] = JSON.parse(roomListJSON);\r\n                //window.alert('got roomlist!');\r\n                dispatch({type: ClientStateActionType.SetRoomList, roomList: roomList});\r\n            });\r\n\r\n            socket.on('playerData', (playerDataJSON: string) => {\r\n                const playerData: PlayerData = JSON.parse(playerDataJSON);\r\n                dispatch({type: ClientStateActionType.SetPlayer, player: playerData});\r\n            });\r\n\r\n            socket.on('roomData', (roomDataJSON: string) => {\r\n                const flatRoomData: RoomDataFlat | null = JSON.parse(roomDataJSON);\r\n                const roomData = (flatRoomData !== null) ? unflatten(flatRoomData) : undefined;\r\n                dispatch({type: ClientStateActionType.SetRoom, room: roomData});\r\n            });\r\n\r\n            return () => {\r\n                socket.disconnect();\r\n                dispatch({type: ClientStateActionType.SetSocket, socket: undefined});\r\n            }\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    if (state.socket !== undefined && state.player !== undefined && state.room !== undefined) {\r\n        // Render room\r\n        return (\r\n            <Room\r\n                socket = {state.socket}\r\n                player = {state.player}\r\n                room = {state.room}\r\n            />\r\n        )\r\n    } else {\r\n        // Render lobby\r\n        return (\r\n            <Lobby\r\n                socket = {state.socket}\r\n                roomList = {state.roomList}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Client;","import React from 'react';\nimport Client from './Client';\nimport './App.css';\n\nfunction App() {\n  \treturn (\n\t\t<div className=\"App\">\n\t\t\t<Client />\n\t\t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}