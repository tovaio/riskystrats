{"version":3,"sources":["component/Map/MapEdge/MapEdge.module.scss","component/Map/MapArmy/MapArmy.module.scss","component/Effect/SelectedCircle.module.scss","component/Map/MapNode/MapNode.module.scss","component/Client/ClientState.ts","component/Room/RoomState.ts","component/Lobby/Lobby.tsx","component/Player/PlayerData.ts","style/Constants.ts","component/Map/MapNode/MapNodeData.ts","component/Map/MapNode/MapNodeShape.tsx","component/Map/MapNode/MapNode.tsx","component/Map/MapEdge/MapEdge.tsx","component/Map/Map.tsx","component/Map/MapArmy/MapArmy.tsx","component/Effect/SelectedCircle.tsx","component/Game/Game.tsx","component/Room/Room.tsx","component/Client/Client.tsx","component/Room/RoomData.ts","App.tsx","index.tsx"],"names":["module","exports","ClientStateActionType","RoomStateActionType","initClientState","socket","undefined","room","player","roomList","clientStateReducer","state","action","type","SetSocket","SetRoom","SetPlayer","SetRoomList","Error","Lobby","props","createRoom","useCallback","emit","joinRoom","roomSummary","id","roomSummaries","map","onMouseDown","name","nPlayers","maxPlayers","nSpectators","Team","initRoomState","nodeHoveredID","nodeSelectedID","mouseDown","roomStateReducer","SetNodeHoveredID","SetNodeSelectedID","SetMouseDown","NodeType","nodeColors","Neutral","Red","Blue","Green","Yellow","Orange","Purple","makeCircle","cx","cy","r","css","className","style","mapNodeCircle","makePolygon","numCircles","miniRadius","Math","sin","PI","angleFragment","elems","d","i","angle","x","y","cos","push","fill","stroke","strokeWidth","MapNodeShape","Normal","Factory","PowerPlant","Fort","Artillery","MapNode","visible","team","node","adj","isVisible","selectable","nodeSelected","hovered","nodeHovered","primaryColor","secondaryColor","invertColors","cursor","onMouseEnter","onMouseEnterNode","onMouseLeave","onMouseLeaveNode","mapNodeText","dominantBaseline","troops","MapEdge","node1","node2","styles","mapEdgeVisible","mapEdgeInvisible","x1","y1","x2","y2","transition","Map","nodes","key","edges","concat","MapArmy","color","army","useEffect","fromNode","from","toNode","to","xDiff","yDiff","distance","sqrt","btwnDistance","nodeRadius","atan2","gsap","ease","set","mapArmyCircle","mapArmyText","SelectedCircle","tl","t","fromTo","transformOrigin","opacity","scale","onComplete","timeline","repeat","rotationTime","rotate","kill","selectedCircle","strokeDasharray","Game","game","length","minX","maxX","minY","maxY","min","max","findBounds","maxD","minD","viewport","mousePosition","setViewport","newViewport","attr","viewBox","onMouseMove","e","clientX","clientY","buttons","which","movementX","window","innerWidth","innerHeight","movementY","onMouseWheel","deltaY","newD","pow","document","addEventListener","removeEventListener","armies","sort","a","b","width","height","assign","Room","useReducer","dispatch","onKeyDown","keyCode","unselect","String","fromCharCode","onMouseUp","players","summary","Client","console","log","io","connect","on","roomListJSON","JSON","parse","playerDataJSON","playerData","roomDataJSON","flatRoomData","roomData","flatRoom","spectators","flatMap","flatNode","adjID","flatArmy","nodeID1","nodeID2","unflattenRoom","disconnect","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.5158ea85.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapEdgeVisible\":\"MapEdge_mapEdgeVisible__2Ry56\",\"mapEdgeInvisible\":\"MapEdge_mapEdgeInvisible__1JHUX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapArmyText\":\"MapArmy_mapArmyText__WrFei\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedCircle\":\"SelectedCircle_selectedCircle__3K0j8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mapNodeCircle\":\"MapNode_mapNodeCircle__1y6lu\",\"mapNodeText\":\"MapNode_mapNodeText__1YOMw\"};","import { useReducer } from 'react';\r\n\r\nimport { PlayerData } from 'component/Player/PlayerData';\r\nimport { RoomData } from 'component/Room/RoomData';\r\nimport { RoomListData } from 'component/Lobby/LobbyData';\r\n\r\ninterface ClientState {\r\n    socket: SocketIOClient.Socket | undefined,\r\n    room: RoomData | undefined,\r\n    player: PlayerData | undefined,\r\n    roomList: RoomListData | undefined\r\n}\r\n\r\nexport enum ClientStateActionType {\r\n    SetSocket,\r\n    SetRoom,\r\n    SetPlayer,\r\n    SetRoomList\r\n}\r\n\r\ninterface SetSocketAction {\r\n    type: ClientStateActionType.SetSocket,\r\n    socket: SocketIOClient.Socket | undefined\r\n}\r\n\r\ninterface SetRoomAction {\r\n    type: ClientStateActionType.SetRoom,\r\n    room: RoomData | undefined\r\n}\r\n\r\ninterface SetPlayerAction {\r\n    type: ClientStateActionType.SetPlayer,\r\n    player: PlayerData | undefined\r\n}\r\n\r\ninterface SetRoomListAction {\r\n    type: ClientStateActionType.SetRoomList,\r\n    roomList: RoomListData | undefined\r\n}\r\n\r\ntype ClientStateAction = SetSocketAction | SetRoomAction | SetPlayerAction | SetRoomListAction;\r\n\r\nconst initClientState: ClientState = {\r\n    socket: undefined,\r\n    room: undefined,\r\n    player: undefined,\r\n    roomList: undefined\r\n};\r\n\r\nconst clientStateReducer = (state: ClientState, action: ClientStateAction): ClientState => {\r\n    switch (action.type) {\r\n        case ClientStateActionType.SetSocket:\r\n            return {\r\n                socket: action.socket,\r\n                room: state.room,\r\n                player: state.player,\r\n                roomList: state.roomList\r\n            }\r\n        case ClientStateActionType.SetRoom:\r\n            return {\r\n                socket: state.socket,\r\n                room: action.room,\r\n                player: state.player,\r\n                roomList: state.roomList\r\n            }\r\n        case ClientStateActionType.SetPlayer:\r\n            return {\r\n                socket: state.socket,\r\n                room: state.room,\r\n                player: action.player,\r\n                roomList: state.roomList\r\n            };\r\n        case ClientStateActionType.SetRoomList:\r\n            return {\r\n                socket: state.socket,\r\n                room: state.room,\r\n                player: state.player,\r\n                roomList: action.roomList\r\n            };\r\n        default:\r\n            throw new Error(\"Action type not found for clientStateReducer!\");\r\n    }\r\n}\r\n\r\nexport type ClientStateDispatch = React.Dispatch<ClientStateAction>;\r\n\r\nexport const useClientState = (): [ClientState, ClientStateDispatch] => {\r\n    return useReducer(clientStateReducer, initClientState);\r\n}\r\n\r\n","import { useReducer } from 'react';\r\n\r\ninterface RoomState {\r\n    nodeHoveredID: number | undefined,\r\n    nodeSelectedID: number | undefined,\r\n    mouseDown: boolean\r\n}\r\n\r\nexport enum RoomStateActionType {\r\n    SetNodeHoveredID,\r\n    SetNodeSelectedID,\r\n    SetMouseDown\r\n}\r\n\r\ninterface SetNodeHoveredIDAction {\r\n    type: RoomStateActionType.SetNodeHoveredID,\r\n    nodeHoveredID: number | undefined\r\n}\r\n\r\ninterface SetNodeSelectedIDAction {\r\n    type: RoomStateActionType.SetNodeSelectedID,\r\n    nodeSelectedID: number | undefined\r\n}\r\n\r\ninterface SetMouseDownAction {\r\n    type: RoomStateActionType.SetMouseDown,\r\n    mouseDown: boolean\r\n}\r\n\r\ntype RoomStateAction = SetNodeHoveredIDAction | SetNodeSelectedIDAction | SetMouseDownAction;\r\n\r\nconst initRoomState: RoomState = {\r\n    nodeHoveredID: undefined,\r\n    nodeSelectedID: undefined,\r\n    mouseDown: false\r\n};\r\n\r\nconst roomStateReducer = (state: RoomState, action: RoomStateAction): RoomState => {\r\n    switch (action.type) {\r\n        case RoomStateActionType.SetNodeHoveredID:\r\n            return {\r\n                nodeHoveredID: action.nodeHoveredID,\r\n                nodeSelectedID: state.nodeSelectedID,\r\n                mouseDown: state.mouseDown\r\n            }\r\n        case RoomStateActionType.SetNodeSelectedID:\r\n            return {\r\n                nodeHoveredID: state.nodeHoveredID,\r\n                nodeSelectedID: action.nodeSelectedID,\r\n                mouseDown: state.mouseDown\r\n            }\r\n        case RoomStateActionType.SetMouseDown:\r\n            return {\r\n                nodeHoveredID: state.nodeHoveredID,\r\n                nodeSelectedID: state.nodeSelectedID,\r\n                mouseDown: action.mouseDown\r\n            }\r\n        default:\r\n            throw new Error(\"Action type not found for roomStateReducer!\")\r\n    }\r\n}\r\n\r\nexport type RoomStateDispatch = React.Dispatch<RoomStateAction>\r\n\r\nexport const useRoomState = (): [RoomState, RoomStateDispatch] => {\r\n    return useReducer(roomStateReducer, initRoomState);\r\n}\r\n","import React, { useCallback } from 'react';\r\n\r\nimport { RoomSummaryData } from './LobbyData';\r\n\r\n// Properties for Lobby component\r\ninterface LobbyProps {\r\n    socket: SocketIOClient.Socket | undefined,\r\n    roomList: RoomSummaryData[] | undefined;\r\n}\r\n\r\n/*\r\n    Lobby:\r\n    React component which represents the main menu of the game\r\n*/\r\nconst Lobby: React.FC<LobbyProps> = props => {\r\n    const createRoom = useCallback(\r\n        () => {\r\n            if (props.socket !== undefined) {\r\n                props.socket.emit('createRoom', 2, false);\r\n            }\r\n        },\r\n        [props.socket]\r\n    )\r\n\r\n    const joinRoom = useCallback(\r\n        (roomSummary: RoomSummaryData) => {\r\n            if (props.socket !== undefined) {\r\n                props.socket.emit('joinRoom', roomSummary.id);\r\n            }\r\n        },\r\n        [props.socket]\r\n    );\r\n\r\n    if (props.roomList !== undefined) {\r\n        const roomSummaries = props.roomList.map(roomSummary => (\r\n            <p onMouseDown={() => {joinRoom(roomSummary);}}>\r\n                {roomSummary.name}: {roomSummary.nPlayers} players / {roomSummary.maxPlayers} max players / {roomSummary.nSpectators} spectators\r\n            </p>\r\n        ));\r\n\r\n        return (\r\n            <>\r\n                <p onMouseDown={() => {createRoom();}}>\r\n                    Create Room!\r\n                </p>\r\n                {roomSummaries}\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <p>Waiting to retrieve the room list from the server...</p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lobby;","export enum Team {\r\n    Neutral,\r\n    Red,\r\n    Blue,\r\n    Green,\r\n    Yellow,\r\n    Orange,\r\n    Purple\r\n}\r\n\r\nexport interface PlayerData {\r\n    team: Team,\r\n    name: string,\r\n    id: number\r\n}","/*\r\n    Collection of utility functions and constants\r\n*/\r\n\r\nimport { Team } from 'component/Player/PlayerData';\r\n\r\nexport const nodeColors = {\r\n    [Team.Neutral]: '#444444',\r\n    [Team.Red]: '#DD0000',\r\n    [Team.Blue]: '#0000DD',\r\n    [Team.Green]: '#00DD00',\r\n    [Team.Yellow]: '#DDDD00',\r\n    [Team.Orange]: '#DD7700',\r\n    [Team.Purple]: '#7700DD'\r\n};\r\n\r\nexport const nodeRadius = 2;\r\nexport const armyRadius = 1;\r\nexport const edgeWidth = 5/9;\r\nexport const scaleFactor = 1;\r\n\r\nexport const fontStack = \"'Courier New', Courier, monospace\";","import { Team } from 'component/Player/PlayerData';\r\n\r\n// Types of buildings on nodes\r\nexport enum NodeType {\r\n    Normal,                                             // No building (default for all nodes)\r\n    Factory,                                            // Factory (generates more troops per second)\r\n    PowerPlant,                                         // PowerPlant (increases production output of adjacent factories)\r\n    Fort,                                               // Fort (adds defensive bonus against incoming enemy armies)\r\n    Artillery                                           // Artillery (adds offensive bonus to outgoing friendly armies)\r\n}\r\n\r\n// Data interface for MapNode\r\nexport interface MapNodeData {\r\n    x: number,\r\n    y: number,\r\n    id: number,\r\n    adj: MapNodeData[],\r\n    team: Team,\r\n    troops: number,\r\n    type: NodeType,\r\n    assign: MapNodeData | undefined\r\n}\r\n\r\n// Non-recursive data interface for MapNode\r\nexport interface MapNodeDataFlat {\r\n    x: number,\r\n    y: number,\r\n    id: number,\r\n    adj: number[],\r\n    team: Team,\r\n    troops: number,\r\n    type: NodeType,\r\n    assign: number\r\n}","import React from 'react';\r\n\r\nimport { NodeType } from './MapNodeData';\r\n\r\nimport { nodeRadius, edgeWidth } from 'style/Constants';\r\nimport style from './MapNode.module.scss';\r\n\r\ninterface MapNodeShapeProps {\r\n    cx: number,\r\n    cy: number,\r\n    fill: string,\r\n    stroke: string\r\n}\r\n\r\nconst makeCircle = (cx: number, cy: number, r: number, css: React.CSSProperties) => (\r\n    <circle\r\n        className = {style.mapNodeCircle}\r\n\r\n        // Position\r\n        cx = {cx}\r\n        cy = {cy}\r\n        r = {r}\r\n\r\n        // Colors\r\n        style = {css}\r\n    />\r\n);\r\n\r\nconst makePolygon = (numCircles: number, props: React.PropsWithChildren<MapNodeShapeProps>) => {\r\n    const miniRadius = nodeRadius / (1 + 1/Math.sin(Math.PI / numCircles));\r\n    const angleFragment = 2 * Math.PI / numCircles;\r\n\r\n    const elems = [];\r\n\r\n    let d = \"\";\r\n\r\n    for (let i = 0; i < numCircles; i++) {\r\n        const angle = angleFragment * i\r\n        const x = props.cx + Math.sin(angle) * miniRadius / Math.sin(angleFragment / 2);\r\n        const y = props.cy - Math.cos(angle) * miniRadius / Math.sin(angleFragment / 2);\r\n        elems.push(makeCircle(x, y, miniRadius, {\r\n            fill: props.fill,\r\n            stroke: props.stroke,\r\n            strokeWidth: edgeWidth\r\n        }));\r\n        d += `${(i === 0) ? 'M' : 'L'} ${x},${y} `;\r\n    }\r\n    d += 'Z';\r\n\r\n    elems.push((\r\n        <path\r\n            className = {style.mapNodeCircle}\r\n            d = {d}\r\n            fill = {props.fill}\r\n            stroke = {props.fill}\r\n            strokeWidth = {edgeWidth/2}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            {elems}\r\n        </>\r\n    );\r\n}\r\n\r\nconst MapNodeShape: Record<NodeType, React.FC<MapNodeShapeProps>> = {\r\n    [NodeType.Normal]: props => makeCircle(props.cx, props.cy, nodeRadius, {\r\n        fill: props.fill,\r\n        stroke: props.stroke,\r\n        strokeWidth: edgeWidth\r\n    }),\r\n    [NodeType.Factory]: props => makePolygon(2, props),\r\n    [NodeType.PowerPlant]: props => makePolygon(3, props),\r\n    [NodeType.Fort]: props => makePolygon(4, props),\r\n    [NodeType.Artillery]: props => makePolygon(5, props),\r\n};\r\n\r\nexport default MapNodeShape;","import React from 'react';\r\nimport { nodeColors } from 'style/Constants';\r\n\r\nimport { MapNodeData, NodeType } from './MapNodeData';\r\nimport MapNodeShape from './MapNodeShape';\r\n\r\nimport { Team } from 'component/Player/PlayerData';\r\n\r\nimport style from './MapNode.module.scss';\r\n\r\n// Determines if a node is visible to a certain player.\r\nconst isVisible = (node: MapNodeData, team: Team): boolean => {\r\n    if (node.team === team) {\r\n        return true;\r\n    } else {\r\n        for (let adjNode of node.adj) {\r\n            if (adjNode.team === team)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n// Properties for MapNode component\r\ninterface MapNodeProps {\r\n    node: MapNodeData,                                  // Node represented by this component\r\n    team: Team,                                         // Team of the player rendering this node\r\n    nodeHovered?: MapNodeData,                          // Node that the player is hovering over\r\n    nodeSelected?: MapNodeData,                         // Node that the player has currently selected\r\n    onMouseEnterNode?: (node: MapNodeData) => void,     // Callback for when the player's mouse enters the node\r\n    onMouseLeaveNode?: (node: MapNodeData) => void      // Callback for when the player's mouse leaves the node\r\n}\r\n\r\n/*\r\n    MapNode:\r\n    Component which visualizes a node on the game map\r\n*/\r\nconst MapNode: React.FC<MapNodeProps> = (props) => {\r\n    // Helper booleans\r\n    const visible = props.team === Team.Neutral || isVisible(props.node, props.team);\r\n    const selectable = props.team !== Team.Neutral && ((props.nodeSelected !== undefined && visible) || props.node.team === props.team);\r\n    const hovered = props.node === props.nodeHovered;\r\n\r\n    // Colors\r\n    const primaryColor = visible ? nodeColors[props.node.team] : nodeColors[Team.Neutral];\r\n    const secondaryColor = visible ? '#eeeeee' : nodeColors[Team.Neutral];\r\n    const invertColors = (selectable && hovered);\r\n\r\n    // Border\r\n    //const borderRadius = (visible && (props.node.type === NodeType.Artillery || props.node.type === NodeType.Fort)) ? 5 : 50;\r\n    //const borderStyle = (visible && props.node.type !== NodeType.Normal) ? ((props.node.type === NodeType.Artillery || props.node.type === NodeType.Factory) ? 'double' : 'inset') : 'solid';\r\n\r\n    return (\r\n        <g\r\n            style = {{\r\n                // Cursor\r\n                cursor: (selectable && hovered) ? 'pointer' : 'default'\r\n            }}\r\n\r\n            // Callbacks\r\n            onMouseEnter = {() => {if (props.onMouseEnterNode !== undefined) props.onMouseEnterNode(props.node);}}\r\n            onMouseLeave = {() => {if (props.onMouseLeaveNode !== undefined) props.onMouseLeaveNode(props.node);}}\r\n        >\r\n            {\r\n                MapNodeShape[visible ? props.node.type : NodeType.Normal]({\r\n                    cx: props.node.x,\r\n                    cy: props.node.y,\r\n                    fill: invertColors ? secondaryColor : primaryColor,\r\n                    stroke: invertColors ? primaryColor : secondaryColor\r\n                })\r\n            }\r\n            <text\r\n                className = {style.mapNodeText}\r\n\r\n                // Text position\r\n                dominantBaseline = 'middle'\r\n\r\n                // Position\r\n                x = {props.node.x}\r\n                y = {props.node.y}\r\n\r\n                // Colors\r\n                style = {{\r\n                    fill: invertColors ? primaryColor : secondaryColor,\r\n                    stroke: invertColors ? secondaryColor: primaryColor\r\n                }}\r\n            >\r\n                {(visible) ? props.node.troops : null}\r\n            </text>\r\n        </g>\r\n    );\r\n}\r\n\r\nexport default MapNode;","import React from 'react';\r\nimport { nodeColors, edgeWidth } from 'style/Constants';\r\n\r\nimport { MapNodeData } from 'component/Map/MapNode/MapNodeData';\r\nimport { Team } from 'component/Player/PlayerData';\r\n\r\nimport styles from './MapEdge.module.scss';\r\n\r\n// Properties for MapEdge component\r\ninterface MapEdgeProps {\r\n    node1: MapNodeData,                         // The first endpoint node of the edge\r\n    node2: MapNodeData,                         // The second endpoint node of the edge\r\n    team: Team,                                 // Team of the player that is rendering this edge\r\n    nodeSelected?: MapNodeData                  // Node that the player currently has selected\r\n}\r\n\r\n/*\r\n    MapEdge:\r\n    Component which represents an edge between two nodes on the game map\r\n*/\r\nconst MapEdge: React.FC<MapEdgeProps> = props => {\r\n    // Helper booleans\r\n    const visible = props.team === Team.Neutral || props.node1.team === props.team || props.node2.team === props.team;\r\n\r\n    return (\r\n        <line\r\n            className = {visible ? styles.mapEdgeVisible : styles.mapEdgeInvisible}\r\n\r\n            // Position\r\n            x1 = {props.node1.x}\r\n            y1 = {props.node1.y}\r\n            x2 = {props.node2.x}\r\n            y2 = {props.node2.y}\r\n\r\n            // Style\r\n            style={{\r\n                // Stroke style\r\n                stroke: visible ? '#eeeeee' : nodeColors[Team.Neutral],\r\n                strokeWidth: edgeWidth,\r\n\r\n                // Transition\r\n                transition: 'stroke 0.15s'\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default MapEdge;","import React from 'react';\r\n\r\nimport { MapData } from './MapData';\r\n\r\nimport MapNode from './MapNode/MapNode';\r\nimport { MapNodeData } from './MapNode/MapNodeData';\r\nimport MapEdge from './MapEdge/MapEdge';\r\n\r\nimport { Team } from 'component/Player/PlayerData';\r\n\r\nimport './Map.css';\r\n\r\n// Properties for Map component\r\ninterface MapProps {\r\n    map: MapData,\r\n    team: Team,\r\n    nodeHoveredID?: number,\r\n    nodeSelectedID?: number,\r\n    onMouseEnterNode?: (node: MapNodeData) => void,\r\n    onMouseLeaveNode?: (node: MapNodeData) => void\r\n}\r\n\r\n/*\r\n    Map:\r\n    React component which resembles just the geometry of the game (nodes and edges)\r\n*/\r\nconst Map: React.FC<MapProps> = props => {\r\n    const nodeHovered = (props.nodeHoveredID !== undefined) ? props.map.nodes[props.nodeHoveredID] : undefined;\r\n    const nodeSelected = (props.nodeSelectedID !== undefined) ? props.map.nodes[props.nodeSelectedID] : undefined;\r\n    \r\n    const nodes = props.map.nodes.map(node => (\r\n        <MapNode\r\n            node = {node}\r\n            team = {props.team}\r\n            nodeHovered = {nodeHovered}\r\n            nodeSelected = {nodeSelected}\r\n            onMouseEnterNode = {props.onMouseEnterNode}\r\n            onMouseLeaveNode = {props.onMouseLeaveNode}\r\n            key = {`node_${node.id}`}\r\n        />\r\n    ));\r\n\r\n    const edges = props.map.edges.map(([node1, node2]) => (\r\n        <MapEdge\r\n            node1 = {node1}\r\n            node2 = {node2}\r\n            team = {props.team}\r\n            nodeSelected = {nodeSelected}\r\n            key = {`edge_${node1.id}_${node2.id}`}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <>\r\n            {edges.concat(nodes)}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Map;","import React, { useEffect } from 'react';\r\nimport gsap from 'gsap';\r\n\r\nimport { nodeRadius, armyRadius, nodeColors } from 'style/Constants';\r\n\r\nimport { MapArmyData } from './MapArmyData';\r\n\r\nimport { Team } from 'component/Player/PlayerData';\r\n\r\nimport styles from './MapArmy.module.scss';\r\n\r\n// Properties for MapArmy component\r\ninterface MapArmyProps {\r\n    army: MapArmyData,\r\n    team: Team\r\n}\r\n\r\n/*\r\n    MapArmy:\r\n    Component which represents a travelling army on the game map\r\n*/\r\nconst MapArmy: React.FC<MapArmyProps> = (props) => {\r\n    // Color\r\n    const color = nodeColors[props.army.team];\r\n\r\n    useEffect(\r\n        () => {\r\n            const fromNode = props.army.from;\r\n            const toNode = props.army.to;\r\n\r\n            // Math\r\n            const xDiff = toNode.x - fromNode.x;\r\n            const yDiff = toNode.y - fromNode.y;\r\n\r\n            const distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n            const btwnDistance = nodeRadius + armyRadius + props.army.distance * (distance - 2 * nodeRadius - 2 * armyRadius) / distance;\r\n\r\n            const angle = Math.atan2(yDiff, xDiff);\r\n\r\n            const x = fromNode.x + Math.cos(angle) * btwnDistance;\r\n            const y = fromNode.y + Math.sin(angle) * btwnDistance;\r\n\r\n            if (props.army.distance > 0) {\r\n                gsap.to(`.army-${props.army.id}`, 0.5, {\r\n                    x: x,\r\n                    y: y,\r\n                    ease: \"none\"\r\n                });\r\n            } else {\r\n                gsap.set(`.army-${props.army.id}`, {\r\n                    x: x,\r\n                    y: y\r\n                });\r\n            }\r\n        },\r\n        [props.army]\r\n    );\r\n\r\n    // Don't show if not visible to player!\r\n    if (props.team !== Team.Neutral && props.army.from.team !== props.team && props.army.to.team !== props.team)\r\n        return <></>;\r\n\r\n    return (\r\n        <>\r\n            <circle\r\n                className = {`${styles.mapArmyCircle} army-${props.army.id}`}\r\n\r\n                // Size and position\r\n                r = {armyRadius}\r\n\r\n                // Color\r\n                style = {{\r\n                    fill: color\r\n                }}\r\n            />\r\n            <text\r\n                className = {`${styles.mapArmyText} army-${props.army.id}`}\r\n\r\n                // Text position\r\n                dominantBaseline = 'middle'\r\n\r\n                // Color\r\n                style = {{\r\n                    stroke: color\r\n                }}\r\n            >\r\n                {props.army.troops}\r\n            </text>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default MapArmy;","import React, { useEffect } from 'react';\r\nimport gsap from 'gsap';\r\n\r\nimport { MapNodeData } from 'component/Map/MapNode/MapNodeData';\r\n\r\nimport { nodeRadius } from 'style/Constants';\r\nimport style from './SelectedCircle.module.scss';\r\n\r\ninterface SelectedCircleProps {\r\n    node: MapNodeData,\r\n    color?: string\r\n}\r\n\r\nconst SelectedCircle: React.FC<SelectedCircleProps> = props => {\r\n    const radiusFactor = 1.4;\r\n    const maxScale = 1.1;\r\n\r\n    useEffect(\r\n        () => {\r\n            const className = `.selected-node-${props.node.id}`;\r\n\r\n            let tl: gsap.core.Timeline | undefined = undefined;\r\n\r\n            const t = gsap.fromTo(className, 0.15, {\r\n                transformOrigin: 'center center',\r\n                opacity: 0,\r\n                scale: 0.5\r\n            }, {\r\n                transformOrigin: 'center center',\r\n                opacity: 1,\r\n                scale: 1,\r\n                ease: 'power1.out',\r\n                onComplete: () => {\r\n                    tl = gsap.timeline({repeat: -1});\r\n                    const rotationTime = 10;\r\n                    const pulsesPerRotation = 8;\r\n\r\n                    for (let i = 0; i < pulsesPerRotation; i++) {\r\n                        tl.to(className, rotationTime / 2 / pulsesPerRotation, {\r\n                            scale: maxScale,\r\n                            ease: 'power1.inOut'\r\n                        }, \">\");\r\n                        tl.to(className, rotationTime / 2 / pulsesPerRotation, {\r\n                            scale: 1,\r\n                            ease: 'power1.inOut'\r\n                        }, \">\");\r\n                    }\r\n\r\n                    tl.fromTo(className, rotationTime, {\r\n                        rotate: '0deg',\r\n                        ease: 'none'\r\n                    }, {\r\n                        rotate: '360deg',\r\n                        ease: 'none'\r\n                    }, 0);\r\n                }\r\n            });\r\n\r\n            return () => {\r\n                if (tl !== undefined)\r\n                    tl.kill();\r\n                t.kill();\r\n            };\r\n        },\r\n        [props.node.id]\r\n    );\r\n\r\n    return (\r\n        <circle\r\n            className = {`${style.selectedCircle} selected-node-${props.node.id}`}\r\n\r\n            cx = {props.node.x}\r\n            cy = {props.node.y}\r\n            r = {nodeRadius * radiusFactor}\r\n\r\n            strokeDasharray = {nodeRadius * radiusFactor * Math.PI / 10}\r\n\r\n            style = {props.color !== undefined ? {stroke: props.color} : {}}\r\n        />\r\n    );\r\n}\r\n\r\nexport default SelectedCircle;\r\n","import React, { useEffect } from 'react';\r\nimport gsap from 'gsap';\r\n\r\nimport { GameData, Viewport, MousePosition } from './GameData';\r\n\r\nimport Map from 'component/Map/Map';\r\nimport MapArmy from 'component/Map/MapArmy/MapArmy'\r\nimport { MapNodeData } from 'component/Map/MapNode/MapNodeData';\r\n\r\nimport SelectedCircle from 'component/Effect/SelectedCircle';\r\n\r\nimport { Team } from 'component/Player/PlayerData';\r\nimport { MapArmyData } from 'component/Map/MapArmy/MapArmyData';\r\n\r\n// Properties for Game component\r\ninterface GameProps {\r\n    game: GameData,\r\n    team: Team,\r\n    nodeHoveredID?: number,\r\n    nodeSelectedID?: number,\r\n    onMouseEnterNode?: (node: MapNodeData) => void,\r\n    onMouseLeaveNode?: (node: MapNodeData) => void\r\n}\r\n\r\n// Finds [minX, maxX, minY, maxY] of all the nodes in a game's map\r\nconst findBounds = (game: GameData): [number, number, number, number] => {\r\n    if (game.map.nodes.length === 0)\r\n        return [-10, 10, -10, 10];\r\n\r\n    let minX = game.map.nodes[0].x;\r\n    let maxX = minX;\r\n    let minY = game.map.nodes[0].y;\r\n    let maxY = minY;\r\n\r\n    for (let node of game.map.nodes) {\r\n        minX = Math.min(minX, node.x);\r\n        maxX = Math.max(maxX, node.x);\r\n        minY = Math.min(minY, node.y);\r\n        maxY = Math.max(maxY, node.y);\r\n    }\r\n\r\n    return [minX-10, maxX+10, minY-10, maxY+10];\r\n}\r\n\r\n/*\r\n    Game:\r\n    React component that renders a game of riskystrats.\r\n    It is client-agnostic, meaning that you can use this component to render views of riskystrats games without interaction.\r\n    (one particular example of this is for visualizing replays of games, viewing AI play each other, etc.)\r\n*/\r\nconst Game: React.FC<GameProps> = props => {\r\n    // Determine the mininum / maximum zooming\r\n    const [minX, maxX, minY, maxY] = findBounds(props.game);\r\n\r\n    const maxD = Math.max(maxX - minX, maxY - minY);\r\n    const minD = Math.min(20, maxD);\r\n\r\n    // Bind event listeners\r\n    useEffect(\r\n        () => {\r\n            let mousePosition: MousePosition = {\r\n                x: 0,\r\n                y: 0\r\n            };\r\n\r\n            let viewport: Viewport;\r\n\r\n            const setViewport = (newViewport: Viewport) => {\r\n                viewport = newViewport;\r\n                gsap.to('#game-svg', 0.3, {\r\n                    attr: {\r\n                        viewBox: `${viewport.x - viewport.d / 2} ${viewport.y - viewport.d / 2} ${viewport.d} ${viewport.d}`\r\n                    },\r\n                    ease: \"power3.out\"\r\n                });\r\n            }\r\n\r\n            setViewport({\r\n                x: (minX + maxX) / 2,\r\n                y: (minY + maxY) / 2,\r\n                d: (maxD + minD) / 2\r\n            });\r\n\r\n            const onMouseMove = (e: MouseEvent) => {\r\n                mousePosition = {\r\n                    x: e.clientX,\r\n                    y: e.clientY\r\n                };\r\n    \r\n                const buttons = e.buttons || e.which;\r\n                if ((buttons & 1) === 1) { // LMB down\r\n                    setViewport({\r\n                        x: Math.min(Math.max(viewport.x - e.movementX * viewport.d / Math.min(window.innerWidth, window.innerHeight), minX + viewport.d/2), maxX - viewport.d/2),\r\n                        y: Math.min(Math.max(viewport.y - e.movementY * viewport.d / Math.min(window.innerWidth, window.innerHeight), minY + viewport.d/2), maxY - viewport.d/2),\r\n                        d: viewport.d\r\n                    });\r\n                }\r\n            };\r\n\r\n            const onMouseWheel = (e: WheelEvent) => {\r\n                if ((viewport.d <= minD && e.deltaY < 0) || (viewport.d >= maxD && e.deltaY > 0))\r\n                    return;\r\n                const newD = Math.min(Math.max(viewport.d * Math.pow(1.2, (e.deltaY > 0) ? 1 : -1), minD), maxD);\r\n                setViewport({\r\n                    x: Math.min(Math.max(viewport.x + (mousePosition.x - window.innerWidth / 2) / Math.min(window.innerWidth, window.innerHeight) * (viewport.d - newD), minX + newD/2), maxX - newD/2),\r\n                    y: Math.min(Math.max(viewport.y + (mousePosition.y - window.innerHeight / 2) / Math.min(window.innerWidth, window.innerHeight) * (viewport.d - newD), minY + newD/2), maxY - newD/2),\r\n                    d: newD\r\n                });\r\n            };\r\n\r\n            document.addEventListener('mousemove', onMouseMove);\r\n            document.addEventListener('wheel', onMouseWheel);\r\n            return () => {\r\n                document.removeEventListener('mousemove', onMouseMove);\r\n                document.removeEventListener('wheel', onMouseWheel);\r\n            }\r\n        },\r\n        [minX, maxX, minY, maxY, maxD, minD]\r\n    );\r\n\r\n    const armies = props.game.armies.sort((a: MapArmyData, b: MapArmyData) => a.troops - b.troops).map(army => (\r\n        <MapArmy\r\n            army = {army}\r\n            team = {props.team}\r\n            key = {`army_${army.id}`}\r\n        />\r\n    ));\r\n\r\n    const nodeSelected = (props.nodeSelectedID !== undefined) ? props.game.map.nodes[props.nodeSelectedID] : undefined;\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <svg\r\n                id = \"game-svg\"\r\n                width = \"100%\"\r\n                height = \"100%\"\r\n            >\r\n                <Map\r\n                    map = {props.game.map}\r\n                    team = {props.team}\r\n                    nodeHoveredID = {props.nodeHoveredID}\r\n                    nodeSelectedID = {props.nodeSelectedID}\r\n                    onMouseEnterNode = {props.onMouseEnterNode}\r\n                    onMouseLeaveNode = {props.onMouseLeaveNode}\r\n                />\r\n                {armies}\r\n                {\r\n                    (nodeSelected !== undefined)\r\n                    ? <SelectedCircle\r\n                        node = {nodeSelected}\r\n                        key = {nodeSelected.id}\r\n                    />\r\n                    : null\r\n                }\r\n                {\r\n                    (nodeSelected !== undefined && nodeSelected.assign !== undefined)\r\n                    ? <SelectedCircle\r\n                        node = {nodeSelected.assign}\r\n                        color = \"#eeee00\"\r\n                        key = {nodeSelected.assign.id}\r\n                    />\r\n                    : null\r\n                }\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React, { useCallback, useEffect } from 'react';\r\n\r\nimport { RoomData } from './RoomData';\r\nimport { useRoomState, RoomStateActionType } from './RoomState';\r\n\r\nimport Game from 'component/Game/Game';\r\nimport { MapNodeData, NodeType } from 'component/Map/MapNode/MapNodeData';\r\n\r\nimport { PlayerData, Team } from 'component/Player/PlayerData';\r\n\r\n// Properties for Room component\r\ninterface RoomProps {\r\n    socket: SocketIOClient.Socket,\r\n    room: RoomData,\r\n    player: PlayerData\r\n}\r\n\r\n/*\r\n    Room:\r\n    React component which manages the rendering and functionality of a game room\r\n*/\r\nconst Room: React.FC<RoomProps> = props => {\r\n    const [state, dispatch] = useRoomState();\r\n\r\n    // Set nodeHoveredID in roomState when the player's mouse enters/leaves a node\r\n    const onMouseEnterNode = useCallback(\r\n        (node: MapNodeData) => {\r\n            dispatch({type: RoomStateActionType.SetNodeHoveredID, nodeHoveredID: node.id});\r\n        },\r\n        [dispatch]\r\n    );\r\n    const onMouseLeaveNode = useCallback(\r\n        () => {\r\n            dispatch({type: RoomStateActionType.SetNodeHoveredID, nodeHoveredID: undefined});\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    // Callback to perform socket actions / adjust roomState when the player presses a button\r\n    const onKeyDown = useCallback(\r\n        (e: KeyboardEvent) => {\r\n            if (props.socket === undefined || props.room === undefined || props.room.game === undefined || props.player === undefined || state.nodeSelectedID === undefined)\r\n                return;\r\n\r\n            const nodeSelected = props.room.game.map.nodes[state.nodeSelectedID];\r\n            if (nodeSelected === undefined || nodeSelected.team !== props.player.team)\r\n                return;\r\n\r\n            const key = e.which || e.keyCode;\r\n\r\n            let unselect = true;\r\n\r\n            switch (String.fromCharCode(key)) {\r\n                case 'A':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.Factory);\r\n                    break;\r\n                case 'S':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.PowerPlant);\r\n                    break;\r\n                case 'Z':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.Fort);\r\n                    break;\r\n                case 'X':\r\n                    props.socket.emit('build', state.nodeSelectedID, NodeType.Artillery);\r\n                    break;\r\n                case 'Q':\r\n                    if (state.nodeHoveredID === undefined || state.nodeHoveredID === state.nodeSelectedID)\r\n                        break;\r\n                    props.socket.emit('sendArmy', state.nodeSelectedID, state.nodeHoveredID, 10);\r\n                    unselect = false;\r\n                    break;\r\n                case 'W':\r\n                    if (state.nodeHoveredID === undefined || state.nodeHoveredID === state.nodeSelectedID)\r\n                        break;\r\n                    props.socket.emit('sendArmy', state.nodeSelectedID, state.nodeHoveredID, 100);\r\n                    unselect = false;\r\n                    break;\r\n                case 'E':\r\n                    if (state.nodeHoveredID === state.nodeSelectedID)\r\n                        break;\r\n                    props.socket.emit('assign', state.nodeSelectedID, (state.nodeHoveredID !== undefined) ? state.nodeHoveredID : -1);\r\n                    unselect = false;\r\n                    break;\r\n            }\r\n            if (unselect)\r\n                dispatch({type: RoomStateActionType.SetNodeSelectedID, nodeSelectedID: undefined});\r\n        },\r\n        [props, state, dispatch]\r\n    );\r\n\r\n    // Callback to adjust nodeSelected when mouse is clicked\r\n    const onMouseDown = useCallback(\r\n        () => {\r\n            dispatch({type: RoomStateActionType.SetMouseDown, mouseDown: true});\r\n            if (state.nodeHoveredID !== undefined && props.room !== undefined && props.room.game !== undefined && props.player.team !== Team.Neutral) {\r\n                const nodeHovered = props.room.game.map.nodes[state.nodeHoveredID];\r\n                if (nodeHovered !== undefined && nodeHovered.team === props.player.team) {\r\n                    dispatch({type: RoomStateActionType.SetNodeSelectedID, nodeSelectedID: nodeHovered.id});\r\n                    return;\r\n                }\r\n            }\r\n            dispatch({type: RoomStateActionType.SetNodeSelectedID, nodeSelectedID: undefined});\r\n        },\r\n        [props, state, dispatch]\r\n    );\r\n\r\n    // Callback when mouse up\r\n    const onMouseUp = useCallback(\r\n        () => {\r\n            dispatch({type: RoomStateActionType.SetMouseDown, mouseDown: false});\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    // Bind event listeners\r\n    useEffect(\r\n        () => {\r\n            document.addEventListener('keydown', onKeyDown);\r\n            document.addEventListener('mousedown', onMouseDown);\r\n            document.addEventListener('mouseup', onMouseUp);\r\n            return () => {\r\n                document.removeEventListener('keydown', onKeyDown);\r\n                document.removeEventListener('mousedown', onMouseDown);\r\n                document.removeEventListener('mouseup', onMouseUp);\r\n            }\r\n        },\r\n        [onKeyDown, onMouseDown, onMouseUp]\r\n    );\r\n\r\n    if (props.room.game !== undefined) {\r\n        return (\r\n            <Game\r\n                game = {props.room.game}\r\n                team = {props.player.team}\r\n                nodeHoveredID = {state.nodeHoveredID}\r\n                nodeSelectedID = {state.nodeSelectedID}\r\n                onMouseEnterNode = {onMouseEnterNode}\r\n                onMouseLeaveNode = {onMouseLeaveNode}\r\n            />\r\n        );\r\n    } else {\r\n        if (props.room.players.length === props.room.summary.maxPlayers && props.player.id === props.room.players[0].id) {\r\n            props.socket.emit('startRoom');\r\n        }\r\n        return (\r\n            <p>\r\n                Waiting for at least {props.room.summary.maxPlayers} players... (currently at {props.room.summary.nPlayers}!) <br/>\r\n                Perhaps invite friends or open up a new tab of this game?\r\n            </p>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Room;","import React, { useEffect } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nimport { useClientState, ClientStateActionType } from './ClientState';\r\n\r\nimport Lobby from 'component/Lobby/Lobby';\r\nimport { RoomSummaryData } from 'component/Lobby/LobbyData';\r\nimport Room from 'component/Room/Room';\r\nimport { RoomDataFlat, unflattenRoom } from 'component/Room/RoomData';\r\n\r\nimport { PlayerData } from 'component/Player/PlayerData';\r\n\r\n/*\r\n    Client:\r\n    React component which manages state, renders the main lobby/game rooms, etc.\r\n*/\r\nconst Client: React.FC = () => {\r\n    const [state, dispatch] = useClientState();\r\n\r\n    // Connect to WebSocket server\r\n    useEffect(\r\n        () => {\r\n            console.log(\"connecting!\");\r\n            const url = (process.env.NODE_ENV === 'production') ? 'https://riskystrats.herokuapp.com' : 'http://localhost:3001';\r\n            const socket = io.connect(url);\r\n            dispatch({type: ClientStateActionType.SetSocket, socket: socket});\r\n\r\n            socket.on('roomList', (roomListJSON: string) => {\r\n                const roomList: RoomSummaryData[] = JSON.parse(roomListJSON);\r\n                //window.alert('got roomlist!');\r\n                dispatch({type: ClientStateActionType.SetRoomList, roomList: roomList});\r\n            });\r\n\r\n            socket.on('playerData', (playerDataJSON: string) => {\r\n                const playerData: PlayerData = JSON.parse(playerDataJSON);\r\n                dispatch({type: ClientStateActionType.SetPlayer, player: playerData});\r\n            });\r\n\r\n            socket.on('roomData', (roomDataJSON: string) => {\r\n                const flatRoomData: RoomDataFlat | null = JSON.parse(roomDataJSON);\r\n                const roomData = (flatRoomData !== null) ? unflattenRoom(flatRoomData) : undefined;\r\n                dispatch({type: ClientStateActionType.SetRoom, room: roomData});\r\n            });\r\n\r\n            return () => {\r\n                socket.disconnect();\r\n                dispatch({type: ClientStateActionType.SetSocket, socket: undefined});\r\n            }\r\n        },\r\n        [dispatch]\r\n    );\r\n\r\n    if (state.socket !== undefined && state.player !== undefined && state.room !== undefined) {\r\n        // Render room\r\n        return (\r\n            <Room\r\n                socket = {state.socket}\r\n                player = {state.player}\r\n                room = {state.room}\r\n            />\r\n        )\r\n    } else {\r\n        // Render lobby\r\n        return (\r\n            <Lobby\r\n                socket = {state.socket}\r\n                roomList = {state.roomList}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Client;","import { RoomSummaryData } from 'component/Lobby/LobbyData';\r\nimport { GameData, GameDataFlat } from 'component/Game/GameData';\r\n\r\nimport { MapNodeData } from 'component/Map/MapNode/MapNodeData';\r\nimport { MapArmyData } from 'component/Map/MapArmy/MapArmyData';\r\n\r\nimport { PlayerData } from 'component/Player/PlayerData';\r\n\r\n// Data interface for Room\r\nexport interface RoomData {\r\n    game: GameData | undefined,\r\n    players: PlayerData[],\r\n    spectators: PlayerData[],\r\n    summary: RoomSummaryData\r\n}\r\n\r\n// Non-recursive data interface for Room\r\nexport interface RoomDataFlat {\r\n    game: GameDataFlat | undefined,\r\n    players: PlayerData[],\r\n    spectators: PlayerData[],\r\n    summary: RoomSummaryData\r\n}\r\n\r\nexport const unflattenRoom = (flatRoom: RoomDataFlat): RoomData => {\r\n    if (flatRoom.game === undefined) {\r\n        return {\r\n            game: undefined,\r\n            players: flatRoom.players,\r\n            spectators: flatRoom.spectators,\r\n            summary: flatRoom.summary\r\n        }\r\n    }\r\n\r\n    const flatMap = flatRoom.game.map;\r\n\r\n    const nodes: MapNodeData[] = flatMap.nodes.map(flatNode => ({\r\n        x: flatNode.x,\r\n        y: flatNode.y,\r\n        id: flatNode.id,\r\n        adj: [],\r\n        team: flatNode.team,\r\n        troops: flatNode.troops,\r\n        type: flatNode.type,\r\n        assign: undefined\r\n    }));\r\n\r\n    for (let flatNode of flatMap.nodes) {\r\n        const node = nodes[flatNode.id];\r\n        for (let adjID of flatNode.adj) {\r\n            node.adj.push(nodes[adjID]);\r\n        }\r\n        node.assign = flatNode.assign >= 0 ? nodes[flatNode.assign] : undefined;\r\n    }\r\n\r\n    const armies: MapArmyData[] = flatRoom.game.armies.map(flatArmy => ({\r\n        from: nodes[flatArmy.from],\r\n        to: nodes[flatArmy.to],\r\n        troops: flatArmy.troops,\r\n        distance: flatArmy.distance,\r\n        team: flatArmy.team,\r\n        id: flatArmy.id\r\n    }));\r\n\r\n    return {\r\n        game: {\r\n            map: {\r\n                nodes: nodes,\r\n                edges: flatMap.edges.map(([nodeID1, nodeID2]) => [nodes[nodeID1], nodes[nodeID2]])\r\n            },\r\n            armies: armies\r\n        },\r\n        players: flatRoom.players,\r\n        spectators: flatRoom.spectators,\r\n        summary: flatRoom.summary\r\n    }\r\n}","import React from 'react';\r\nimport Client from 'component/Client/Client';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  \treturn (\r\n\t\t<div className=\"App\">\r\n\t\t\t<Client />\r\n\t\t</div>\r\n  \t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}