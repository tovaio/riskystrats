{"version":3,"sources":["Map.tsx","App.tsx","index.tsx"],"names":["NodeType","MapActionType","nodeColors","MapNode","props","primaryColor","visible","team","secondaryColor","selectable","selectedNodeID","owned","selected","nodeID","invertColors","hovering","borderRadius","type","Artillery","Fort","borderType","Normal","Factory","className","onMouseEnter","onMouseLeave","style","width","nodeRadius","height","borderStyle","borderWidth","left","x","top","y","backgroundColor","color","borderColor","cursor","textShadow","boxShadow","assigned","army","MapConnection","angle","Math","atan2","y2","y1","x2","x1","length","sqrt","cos","PI","sin","transform","MapArmy","armyRadius","count","isNodeVisible","net","playerID","nodes","adj","adjID","initMapState","connections","armies","hoveredNodeID","mapReducer","state","action","SetNet","payload","SetPlayerID","SetHoveredNodeID","SetSelectedNodeID","newSelectedNodeID","Error","Map","useReducer","dispatch","socketRef","useRef","onMouseEnterNode","useCallback","onMouseLeaveNode","onKeyDown","e","current","node","key","which","keyCode","console","log","unselect","String","fromCharCode","emit","id","PowerPlant","onMouseDown","useEffect","document","addEventListener","removeEventListener","socket","io","connect","on","newPlayerID","networkString","JSON","parse","disconnect","map","assign","concat","connection","id1","id2","fromNode","from","toNode","to","xDiff","yDiff","distance","btwnDistance","armyID","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.884d64a3.chunk.js","sourcesContent":["import React, { useEffect, useCallback, useRef, useReducer } from 'react';\r\nimport io from 'socket.io-client';\r\nimport './Map.css';\r\n\r\ntype PlayerID = 0 | 1 | 2 | 3 | 4;\r\nenum NodeType {Normal, Factory, PowerPlant, Fort, Artillery};\r\n\r\nconst nodeRadius = 2;\r\nconst armyRadius = 1;\r\nconst connectionWidth = 5/9;\r\n\r\nconst scaleFactor = 1;\r\n\r\ninterface MapNodeProps {\r\n    x: number,\r\n    y: number,\r\n    visible: boolean,\r\n    owned: boolean,\r\n    hovering: boolean,\r\n    team: PlayerID,\r\n    army: number,\r\n    type: NodeType,\r\n    nodeID: number,\r\n    selectedNodeID: number,\r\n    assigned: boolean,\r\n    onMouseEnter: () => void,\r\n    onMouseLeave: () => void\r\n}\r\n\r\nconst nodeColors = [\r\n    '#444444',\r\n    '#DD0000',\r\n    '#00DD00',\r\n    '#0000DD',\r\n    '#DD00DD'\r\n]\r\n\r\nconst MapNode: React.FC<MapNodeProps> = (props) => {\r\n    const primaryColor = props.visible ? nodeColors[props.team] : nodeColors[0];\r\n    const secondaryColor = props.visible ? '#eeeeee' : nodeColors[0];\r\n    const hasSelected = props.selectedNodeID >= 0;\r\n    const selectable = (hasSelected && props.visible) || props.owned;\r\n    const selected = props.nodeID === props.selectedNodeID;\r\n    const invertColors = (selectable && props.hovering) || selected;\r\n\r\n    const borderRadius = (props.visible && (props.type === NodeType.Artillery || props.type === NodeType.Fort)) ? 5 : 50;\r\n    const borderType = (props.visible && props.type !== NodeType.Normal) ? ((props.type === NodeType.Artillery || props.type === NodeType.Factory) ? 'double' : 'inset') : 'solid';\r\n\r\n    return (\r\n        <div\r\n            className='mapNode'\r\n            onMouseEnter={props.onMouseEnter}\r\n            onMouseLeave={props.onMouseLeave}\r\n            style={{\r\n                width: `${nodeRadius * 2 / scaleFactor}vmin`,\r\n                height: `${nodeRadius * 2 / scaleFactor}vmin`,\r\n                borderStyle: borderType,\r\n                borderWidth: `${connectionWidth / scaleFactor}vmin`,\r\n                left: `calc(50% + ${(props.x - nodeRadius) / scaleFactor}vmin)`,\r\n                top: `calc(50% + ${(props.y - nodeRadius) / scaleFactor}vmin)`,\r\n                backgroundColor: invertColors ? secondaryColor : primaryColor,\r\n                color: invertColors ? primaryColor : secondaryColor,\r\n                borderColor: invertColors ? primaryColor : secondaryColor,\r\n                cursor: (selectable && props.hovering) ? 'pointer' : 'default',\r\n                borderRadius: borderRadius,\r\n                textShadow: `\r\n                    -2px -2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                    -2px  2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                     2px -2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                     2px  2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                    -2px    0 0 ${invertColors ? secondaryColor: primaryColor},\r\n                     2px    0 0 ${invertColors ? secondaryColor: primaryColor},\r\n                       0 -2px 0 ${invertColors ? secondaryColor: primaryColor},\r\n                       0  2px 0 ${invertColors ? secondaryColor: primaryColor}\r\n                `,\r\n                boxShadow: (props.assigned) ? `0 0 30px #ffff00` : ''\r\n            }}\r\n        >\r\n            {\r\n                <p>{(props.visible) ? props.army : null}</p>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MapConnectionProps {\r\n    x1: number,\r\n    y1: number,\r\n    x2: number,\r\n    y2: number,\r\n    visible: boolean\r\n}\r\n\r\nconst MapConnection: React.FC<MapConnectionProps> = (props) => {\r\n    let angle = Math.atan2((props.y2-props.y1), (props.x2-props.x1));\r\n    let length = Math.sqrt((props.x2-props.x1)*(props.x2-props.x1) + (props.y2-props.y1)*(props.y2-props.y1));\r\n    return (\r\n        <div\r\n            className='mapConnection'\r\n            style={{\r\n                width: `${length / scaleFactor}vmin`,\r\n                height: `${connectionWidth / scaleFactor}vmin`,\r\n                left: `calc(50% + ${(props.x1 + Math.cos(angle - Math.PI / 2) * connectionWidth / 2) / scaleFactor}vmin)`,\r\n                top: `calc(50% + ${(props.y1 + Math.sin(angle - Math.PI / 2) * connectionWidth / 2) / scaleFactor}vmin)`,\r\n                transform: `rotate(${angle * 180 / Math.PI}deg)`,\r\n                backgroundColor: props.visible ? '#eeeeee' : nodeColors[0]\r\n            }}\r\n        />\r\n    );\r\n}\r\n\r\ninterface MapArmyProps {\r\n    x: number,\r\n    y: number,\r\n    team: PlayerID,\r\n    count: number,\r\n    armyID: number,\r\n}\r\n\r\nconst MapArmy: React.FC<MapArmyProps> = (props) => {\r\n    return (\r\n        <div\r\n            className='mapArmy'\r\n            style={{\r\n                width: `${armyRadius * 2 / scaleFactor}vmin`,\r\n                height: `${armyRadius * 2 / scaleFactor}vmin`,\r\n                left: `calc(50% + ${(props.x - armyRadius) / scaleFactor}vmin)`,\r\n                top: `calc(50% + ${(props.y - armyRadius) / scaleFactor}vmin)`,\r\n                backgroundColor: nodeColors[props.team],\r\n                textShadow: `\r\n                    -1px -1px 0 ${nodeColors[props.team]},\r\n                    -1px  1px 0 ${nodeColors[props.team]},\r\n                     1px -1px 0 ${nodeColors[props.team]},\r\n                     1px  1px 0 ${nodeColors[props.team]},\r\n                    -1px    0 0 ${nodeColors[props.team]},\r\n                     1px    0 0 ${nodeColors[props.team]},\r\n                       0 -1px 0 ${nodeColors[props.team]},\r\n                       0  1px 0 ${nodeColors[props.team]}\r\n                `\r\n            }}\r\n        >\r\n            <p>{props.count}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface NodeObject {\r\n    x: number,\r\n    y: number,\r\n    id: number,\r\n    adj: number[],\r\n    team: PlayerID,\r\n    army: number,\r\n    type: NodeType,\r\n    assign: number\r\n}\r\n\r\ninterface ArmyObject {\r\n    from: number,\r\n    to: number,\r\n    count: number,\r\n    distance: number,\r\n    team: PlayerID,\r\n    id: number\r\n}\r\n\r\ninterface NetworkObject {\r\n    nodes: NodeObject[],\r\n    connections: [number, number][],\r\n    armies: ArmyObject[]\r\n}\r\n\r\nconst areNodesAdjacent = (nodeID1: number, nodeID2: number, net: NetworkObject): boolean => {\r\n    for (let adjID of net.nodes[nodeID1].adj) {\r\n        if (adjID === nodeID2)\r\n            return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst isNodeVisible = (nodeID: number, net: NetworkObject, playerID: PlayerID): boolean => {\r\n    if (playerID === 0 || net.nodes[nodeID].team === playerID)\r\n        return true;\r\n    else {\r\n        for (let adjID of net.nodes[nodeID].adj) {\r\n            if (net.nodes[adjID].team === playerID)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nconst isConnectionVisible = (connection: [number, number], net: NetworkObject, playerID: PlayerID): boolean => {\r\n    return (playerID === 0) || (net.nodes[connection[0]].team === playerID) || (net.nodes[connection[1]].team === playerID);\r\n}\r\n\r\ninterface MapState {\r\n    net: NetworkObject,\r\n    playerID: number,\r\n    hoveredNodeID: number,\r\n    selectedNodeID: number\r\n}\r\n\r\nenum MapActionType {\r\n    SetNet,\r\n    SetPlayerID,\r\n    SetSelectedNodeID,\r\n    SetHoveredNodeID\r\n}\r\n\r\ninterface MapAction {\r\n    type: MapActionType,\r\n    payload?: any\r\n}\r\n\r\nconst initMapState: MapState = {\r\n    net: {\r\n        nodes: [],\r\n        connections: [],\r\n        armies: []\r\n    },\r\n    playerID: -1,\r\n    hoveredNodeID: -1,\r\n    selectedNodeID: -1\r\n}\r\n\r\nconst mapReducer = (state: MapState, action: MapAction) => {\r\n    switch (action.type) {\r\n        case MapActionType.SetNet:\r\n            return {\r\n                net: action.payload,\r\n                playerID: state.playerID,\r\n                hoveredNodeID: state.hoveredNodeID,\r\n                selectedNodeID: state.selectedNodeID\r\n            };\r\n        case MapActionType.SetPlayerID:\r\n            return {\r\n                net: state.net,\r\n                playerID: action.payload,\r\n                hoveredNodeID: state.hoveredNodeID,\r\n                selectedNodeID: state.selectedNodeID\r\n            };\r\n        case MapActionType.SetHoveredNodeID:\r\n            return {\r\n                net: state.net,\r\n                playerID: state.playerID,\r\n                hoveredNodeID: action.payload,\r\n                selectedNodeID: state.selectedNodeID\r\n            };\r\n        case MapActionType.SetSelectedNodeID:\r\n            let newSelectedNodeID = -1;\r\n            if (state.hoveredNodeID >= 0 && state.hoveredNodeID !== state.selectedNodeID && state.net.nodes[state.hoveredNodeID].team === (state.playerID as PlayerID))\r\n                newSelectedNodeID = state.hoveredNodeID;\r\n            return {\r\n                net: state.net,\r\n                playerID: state.playerID,\r\n                hoveredNodeID: state.hoveredNodeID,\r\n                selectedNodeID: newSelectedNodeID\r\n            };\r\n        default:\r\n            throw new Error(\"Action type not found for mapReducer!\");\r\n    }\r\n}\r\n\r\nconst Map: React.FC = () => {\r\n    const [state, dispatch]: [MapState, React.Dispatch<MapAction>] = useReducer(mapReducer, initMapState);\r\n    const socketRef: React.MutableRefObject<SocketIOClient.Socket | null> = useRef(null);\r\n\r\n    const onMouseEnterNode = useCallback((nodeID: number) => {\r\n        dispatch({type: MapActionType.SetHoveredNodeID, payload: nodeID});\r\n    }, []);\r\n\r\n    const onMouseLeaveNode = useCallback(() => {\r\n        dispatch({type: MapActionType.SetHoveredNodeID, payload: -1});\r\n    }, []);\r\n\r\n    const onKeyDown = useCallback((e: KeyboardEvent) => {\r\n        if (state.selectedNodeID < 0\r\n            || state.net.nodes[state.selectedNodeID].team !== (state.playerID as PlayerID)\r\n            || socketRef.current == null)\r\n            return;\r\n        \r\n        const node = state.net.nodes[state.selectedNodeID];\r\n        const key = e.which || e.keyCode;\r\n        console.log(key);\r\n\r\n        let unselect = true;\r\n\r\n        switch (String.fromCharCode(key)) {\r\n            case 'A':\r\n                socketRef.current.emit('convert', node.id, NodeType.Factory);\r\n                break;\r\n            case 'S':\r\n                socketRef.current.emit('convert', node.id, NodeType.PowerPlant);\r\n                break;\r\n            case 'Z':\r\n                socketRef.current.emit('convert', node.id, NodeType.Fort);\r\n                break;\r\n            case 'X':\r\n                socketRef.current.emit('convert', node.id, NodeType.Artillery);\r\n                break;\r\n            case 'Q':\r\n                if (state.hoveredNodeID < 0 || state.hoveredNodeID === node.id) break;\r\n                socketRef.current.emit('sendArmy', node.id, state.hoveredNodeID, 10);\r\n                unselect = false;\r\n                break;\r\n            case 'W':\r\n                if (state.hoveredNodeID < 0 || state.hoveredNodeID === node.id) break;\r\n                socketRef.current.emit('sendArmy', node.id, state.hoveredNodeID, 100);\r\n                unselect = false;\r\n                break;\r\n            case 'E':\r\n                if (state.hoveredNodeID === node.id) break;\r\n                socketRef.current.emit('assign', node.id, state.hoveredNodeID);\r\n                unselect = false;\r\n                break;\r\n        }\r\n        if (unselect) dispatch({type: MapActionType.SetSelectedNodeID, payload: -1});\r\n    }, [state]);\r\n\r\n    const onMouseDown = useCallback(() => {\r\n        console.log(\"called!\");\r\n        dispatch({type: MapActionType.SetSelectedNodeID});\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', onKeyDown);\r\n        return () => {\r\n            document.removeEventListener('keydown', onKeyDown);\r\n        }\r\n    }, [onKeyDown]);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('mousedown', onMouseDown);\r\n        return () => {\r\n            document.removeEventListener('mousedown', onMouseDown);\r\n        }\r\n    }, [onMouseDown]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"connecting!\");\r\n        const socket = io.connect('http://192.168.50.167:3001');\r\n        socketRef.current = socket;\r\n\r\n        socket.on('playerID', (newPlayerID: PlayerID) => {\r\n            dispatch({type: MapActionType.SetPlayerID, payload: newPlayerID});\r\n        });\r\n\r\n        socket.on('network', (networkString: string) => {\r\n            dispatch({type: MapActionType.SetNet, payload: JSON.parse(networkString)});\r\n        });\r\n\r\n        return () => {\r\n            socket.disconnect();\r\n            socketRef.current = null;\r\n        }\r\n    }, [socketRef]);\r\n\r\n    return (\r\n        <div className='map'>\r\n            {\r\n                (state.net.nodes.length === 0) ? \"Loading map...\" :\r\n                (state.playerID < 0)           ? \"Waiting for server...\" :\r\n                state.net.nodes.map((node) => (\r\n                    <MapNode\r\n                        x={node.x}\r\n                        y={node.y}\r\n                        team={node.team}\r\n                        army={node.army}\r\n                        type={node.type}\r\n                        visible={isNodeVisible(node.id, state.net, state.playerID as PlayerID)}\r\n                        hovering={state.hoveredNodeID === node.id}\r\n                        owned={node.team === state.playerID}\r\n                        nodeID={node.id}\r\n                        selectedNodeID={state.selectedNodeID}\r\n                        assigned={state.selectedNodeID > 0 && state.net.nodes[state.selectedNodeID].assign === node.id}\r\n                        onMouseEnter={() => {onMouseEnterNode(node.id);}}\r\n                        onMouseLeave={() => {onMouseLeaveNode();}}\r\n                        key={node.id}\r\n                    />\r\n                )).concat(\r\n                    state.net.connections.map(([id1, id2]) => (\r\n                        <MapConnection\r\n                            x1={state.net.nodes[id1].x}\r\n                            x2={state.net.nodes[id2].x}\r\n                            y1={state.net.nodes[id1].y}\r\n                            y2={state.net.nodes[id2].y}\r\n                            visible={isConnectionVisible([id1, id2], state.net, state.playerID as PlayerID)}\r\n                            key={`${id1}_${id2}`}\r\n                        />\r\n                    ))\r\n                ).concat(\r\n                    state.net.armies.map((army) => {\r\n                        const fromNode = state.net.nodes[army.from];\r\n                        const toNode = state.net.nodes[army.to];\r\n                        if (fromNode.team !== (state.playerID as PlayerID) && toNode.team !== (state.playerID as PlayerID))\r\n                            return <></>;\r\n                        const xDiff = toNode.x - fromNode.x;\r\n                        const yDiff = toNode.y - fromNode.y;\r\n                        const distance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);\r\n                        const btwnDistance = nodeRadius + armyRadius + army.distance * (distance - 2 * nodeRadius - 2 * armyRadius) / distance;\r\n                        const angle = Math.atan2(yDiff, xDiff);\r\n                        return (\r\n                            <MapArmy\r\n                                x={fromNode.x + Math.cos(angle) * btwnDistance}\r\n                                y={fromNode.y + Math.sin(angle) * btwnDistance}\r\n                                team={army.team}\r\n                                count={army.count}\r\n                                armyID={army.id}\r\n                                key={`army_${army.id}`}\r\n                            />\r\n                        )\r\n                    })\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;","import React from 'react';\nimport Map from './Map';\nimport './App.css';\n\nfunction App() {\n  \treturn (\n\t\t<div className=\"App\">\n\t\t\t<Map />\n\t\t</div>\n  \t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}